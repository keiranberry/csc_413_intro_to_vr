//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Resources/NodeControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NodeControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NodeControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NodeControls"",
    ""maps"": [
        {
            ""name"": ""MainControls"",
            ""id"": ""d826fbf6-0932-49bb-97ff-68d8df1eca1e"",
            ""actions"": [
                {
                    ""name"": ""SnapRotate"",
                    ""type"": ""Button"",
                    ""id"": ""7c11708c-84fc-493f-b765-4361adb02160"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport"",
                    ""type"": ""Button"",
                    ""id"": ""45d3c8fb-0396-46d3-b75f-2b7876ce8400"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraMove"",
                    ""type"": ""Value"",
                    ""id"": ""05b4bcdc-d3bb-4cda-8ed7-ccd195cb9a3f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5ef68b84-cafb-4924-bdaf-c9c45acce880"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Teleport"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""c44a29fd-6f62-42f3-a2b8-799d6d5d1df3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SnapRotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3c420aec-d63e-4d54-bb38-e30582f278bf"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""SnapRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b56254c5-00ad-4cd6-9c44-322e9f901404"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""SnapRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""8403bed4-11e1-49be-b0d4-ee8449a9000b"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""5abeb88b-31d3-4268-93cd-4beebf036711"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""f4ae853a-3ff5-4b2a-a58a-5f3a03120aef"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""VR"",
            ""bindingGroup"": ""VR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Desktop"",
            ""bindingGroup"": ""Desktop"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MainControls
        m_MainControls = asset.FindActionMap("MainControls", throwIfNotFound: true);
        m_MainControls_SnapRotate = m_MainControls.FindAction("SnapRotate", throwIfNotFound: true);
        m_MainControls_Teleport = m_MainControls.FindAction("Teleport", throwIfNotFound: true);
        m_MainControls_CameraMove = m_MainControls.FindAction("CameraMove", throwIfNotFound: true);
    }

    ~@NodeControls()
    {
        UnityEngine.Debug.Assert(!m_MainControls.enabled, "This will cause a leak and performance issues, NodeControls.MainControls.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainControls
    private readonly InputActionMap m_MainControls;
    private List<IMainControlsActions> m_MainControlsActionsCallbackInterfaces = new List<IMainControlsActions>();
    private readonly InputAction m_MainControls_SnapRotate;
    private readonly InputAction m_MainControls_Teleport;
    private readonly InputAction m_MainControls_CameraMove;
    public struct MainControlsActions
    {
        private @NodeControls m_Wrapper;
        public MainControlsActions(@NodeControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SnapRotate => m_Wrapper.m_MainControls_SnapRotate;
        public InputAction @Teleport => m_Wrapper.m_MainControls_Teleport;
        public InputAction @CameraMove => m_Wrapper.m_MainControls_CameraMove;
        public InputActionMap Get() { return m_Wrapper.m_MainControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainControlsActions set) { return set.Get(); }
        public void AddCallbacks(IMainControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_MainControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainControlsActionsCallbackInterfaces.Add(instance);
            @SnapRotate.started += instance.OnSnapRotate;
            @SnapRotate.performed += instance.OnSnapRotate;
            @SnapRotate.canceled += instance.OnSnapRotate;
            @Teleport.started += instance.OnTeleport;
            @Teleport.performed += instance.OnTeleport;
            @Teleport.canceled += instance.OnTeleport;
            @CameraMove.started += instance.OnCameraMove;
            @CameraMove.performed += instance.OnCameraMove;
            @CameraMove.canceled += instance.OnCameraMove;
        }

        private void UnregisterCallbacks(IMainControlsActions instance)
        {
            @SnapRotate.started -= instance.OnSnapRotate;
            @SnapRotate.performed -= instance.OnSnapRotate;
            @SnapRotate.canceled -= instance.OnSnapRotate;
            @Teleport.started -= instance.OnTeleport;
            @Teleport.performed -= instance.OnTeleport;
            @Teleport.canceled -= instance.OnTeleport;
            @CameraMove.started -= instance.OnCameraMove;
            @CameraMove.performed -= instance.OnCameraMove;
            @CameraMove.canceled -= instance.OnCameraMove;
        }

        public void RemoveCallbacks(IMainControlsActions instance)
        {
            if (m_Wrapper.m_MainControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_MainControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainControlsActions @MainControls => new MainControlsActions(this);
    private int m_VRSchemeIndex = -1;
    public InputControlScheme VRScheme
    {
        get
        {
            if (m_VRSchemeIndex == -1) m_VRSchemeIndex = asset.FindControlSchemeIndex("VR");
            return asset.controlSchemes[m_VRSchemeIndex];
        }
    }
    private int m_DesktopSchemeIndex = -1;
    public InputControlScheme DesktopScheme
    {
        get
        {
            if (m_DesktopSchemeIndex == -1) m_DesktopSchemeIndex = asset.FindControlSchemeIndex("Desktop");
            return asset.controlSchemes[m_DesktopSchemeIndex];
        }
    }
    public interface IMainControlsActions
    {
        void OnSnapRotate(InputAction.CallbackContext context);
        void OnTeleport(InputAction.CallbackContext context);
        void OnCameraMove(InputAction.CallbackContext context);
    }
}
